{"version":3,"sources":["components/Navbar.js","components/About.js","components/Utils.js","components/Main.js","components/App.js","serviceWorker.js","index.js"],"names":["Navbar","console","log","this","props","react_default","a","createElement","className","href","target","rel","id","account","Component","About","class","contractStateMap","0","1","2","3","responderStateMap","4","Main","_this","Fragment","Alert","variant","Container","Row","Col","lg","xs","dist_default","nrOfLevels","percent","needleColor","textColor","formatTextValue","value","theInput","contractState","responderState","colors","Image","src","fluid","rounded","height","onSubmit","event","preventDefault","name","sensorName","lat","sensorLat","lon","sensorLon","endpoint","sensorEndpoint","createSensor","type","ref","input","placeholder","required","scope","sensors","map","sensor","key","toString","owner","App","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","sensorCount","loading","blockNumber","smokeThreshold","tempThreshold","smokeThresholdBreached","temperatureThresholdBreached","bind","assertThisInitialized","loadWeb3","loadBlockchainData","window","ethereum","web3","Web3","enable","currentProvider","alert","eth","getAccounts","accounts","setState","net","getId","networkId","networkData","Lassie","networks","lassie","Contract","abi","address","methods","i","concat","toConsumableArray","_this2","send","from","once","receipt","components_Navbar","components_About","role","components_Main","Boolean","location","hostname","match","ReactDOM","render","src_components_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.acd1713c.chunk.js","sourcesContent":["import React, { Component } from \"react\";\n\nclass Navbar extends Component {\n  render() {\n    console.log(this.props);\n    return (\n      <nav className=\"navbar navbar-dark fixed-top bg-dark flex-md-nowrap p-0 shadow\">\n        <a\n          className=\"navbar-brand col-sm-3 col-md-2 mr-0\"\n          href=\"\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          ðŸ”¥ Lassie Disaster Response\n        </a>\n        <ul className=\"navbar-nav px-3\">\n          <li className=\"nav-item text-nowrap d-none d-sm-none d-sm-block\">\n            <small className=\"text-white\">\n              <span id=\"account\">Your Account: {this.props.account}</span>\n            </small>\n          </li>\n        </ul>\n      </nav>\n    );\n  }\n}\n\nexport default Navbar;\n","import React, { Component } from \"react\";\n\nclass About extends Component {\n  render() {\n    return (\n      <div class=\"px-3 py-3 pt-md-5 pb-md-4 mx-auto \">\n        <h1>Wild Fire Smart Contract Response</h1>\n      </div>\n    );\n  }\n}\n\nexport default About;\n","// uint8 public contractState;  // 1 = OK    2 = WARNING   3 = CRITICAL\n// uint8 public responderState; // 1 = OK    2 = PREPPED    3 = RESPOND\n\nconst contractStateMap = {\n  0: \"Escrow Funded\",\n  1: \"Escrow Funded\",\n  2: \"WARNING\",\n  3: \"CRITICAL, DEPLOY!\"\n};\n\nconst responderStateMap = {\n  0: \"On Retainer\",\n  1: \"On Retainer\",\n  2: \"PREPARED\",\n  3: \"RESPONDING\",\n  4: \"COMPLETE\"\n};\n\nconst thresholdMap = {\n  0: \"Below Threshold\",\n  1: \"Above Threshold\"\n};\n\nexport const contractStateToString = theInput => {\n  return contractStateMap[theInput];\n};\n\nexport const responderStateToString = theInput => {\n  return responderStateMap[theInput];\n};\n\nexport const thresholdToString = theInput => {\n  return thresholdMap[theInput];\n};\n","import React, { Component } from \"react\";\nimport {\n  contractStateToString,\n  responderStateToString,\n  thresholdToString\n} from \"./Utils\";\nimport GaugeChart from \"react-gauge-chart\";\nimport { Container, Row, Col, Alert, Image } from \"react-bootstrap\";\n\nclass Main extends Component {\n  render() {\n    return (\n      <div id=\"content\">\n        <>\n          {\" \"}\n          <Alert variant={\"secondary\"}>\n            <Container>\n              <Row>\n                <Col lg={6}>\n                  <h3 class=\"text-center\">Contract Parties</h3>\n                </Col>\n                <Col lg={6} class=\"text-center\">\n                  <h3 class=\"text-center\">Contract Variables</h3>\n                </Col>\n              </Row>\n              <Row>\n                <Col xs={12} lg={3}>\n                  <h5 class=\"text-center\">Manager State</h5>\n                  <GaugeChart\n                    id=\"gauge-chart1\"\n                    nrOfLevels={3}\n                    percent={0.15}\n                    needleColor=\"#345243\"\n                    textColor=\"black\"\n                    formatTextValue={value =>\n                      contractStateToString(this.props.contractState)\n                    }\n                  />\n                </Col>\n                <Col xs={12} lg={3}>\n                  <h5 class=\"text-center\">Response Team</h5>\n                  <GaugeChart\n                    id=\"gauge-chart2\"\n                    nrOfLevels={3}\n                    percent={0.15}\n                    needleColor=\"#345243\"\n                    textColor=\"black\"\n                    formatTextValue={value =>\n                      responderStateToString(this.props.responderState)\n                    }\n                  />\n                </Col>\n\n                <Col xs={12} lg={3}>\n                  <h5 class=\"text-center\">Smoke Threshold</h5>\n                  <GaugeChart\n                    id=\"gauge-chart3\"\n                    percent={0.1}\n                    colors={[\"#5BE12C\", \"#F5CD19\", \"#EA4228\"]}\n                    nrOfLevels={2}\n                    textColor=\"black\"\n                    formatTextValue={value => \"Below Threshold\"}\n                  />\n                </Col>\n\n                <Col xs={12} lg={3}>\n                  <h5 class=\"text-center\">Temperature Threshold</h5>\n                  <GaugeChart\n                    id=\"gauge-chart4\"\n                    nrOfLevels={2}\n                    percent={0.15}\n                    needleColor=\"#345243\"\n                    colors={[\"#5BE12C\", \"#F5CD19\", \"#EA4228\"]}\n                    textColor=\"black\"\n                    formatTextValue={value => \"Below Threshold\"}\n                  />\n                </Col>\n              </Row>\n            </Container>\n          </Alert>\n        </>\n        <h2>Real-time Map</h2>\n        <Image src=\"./static-wild-fire.png\" fluid rounded height={100} />\n\n        <h2>Add a Sensor</h2>\n        <form\n          onSubmit={event => {\n            event.preventDefault();\n            const name = this.sensorName.value;\n            // const price = window.web3.utils.toWei(\n            //   this.sensorPrice.value.toString(),\n            //   \"Ether\"\n            // );\n            const lat = this.sensorLat.value;\n            const lon = this.sensorLon.value;\n            const endpoint = this.sensorEndpoint.value;\n            this.props.createSensor(name, lat, lon, endpoint);\n          }}\n        >\n          <div className=\"form-group mr-sm-2\">\n            <input\n              id=\"sensorName\"\n              type=\"text\"\n              ref={input => {\n                this.sensorName = input;\n              }}\n              className=\"form-control\"\n              placeholder=\"Sensor Name\"\n              required\n            />\n          </div>\n          <div className=\"form-group mr-sm-2\">\n            <input\n              id=\"sensorLat\"\n              type=\"text\"\n              ref={input => {\n                this.sensorLat = input;\n              }}\n              className=\"form-control\"\n              placeholder=\"Sensor Latitude\"\n              required\n            />\n          </div>\n          <div className=\"form-group mr-sm-2\">\n            <input\n              id=\"sensorLon\"\n              type=\"text\"\n              ref={input => {\n                this.sensorLon = input;\n              }}\n              className=\"form-control\"\n              placeholder=\"Sensor Longitude\"\n              required\n            />\n          </div>\n          <div className=\"form-group mr-sm-2\">\n            <input\n              id=\"sensorEndpoint\"\n              type=\"text\"\n              ref={input => {\n                this.sensorEndpoint = input;\n              }}\n              className=\"form-control\"\n              placeholder=\"AWS Endpoint\"\n              required\n            />\n          </div>\n          <button type=\"submit\" className=\"btn btn-primary\">\n            Add Sensor\n          </button>\n        </form>\n        <p>&nbsp;</p>\n        <h2>Sensor List</h2>\n        <table className=\"table\">\n          <thead>\n            <tr>\n              <th scope=\"col\">#</th>\n              <th scope=\"col\">Name</th>\n              <th scope=\"col\">Lat</th>\n              <th scope=\"col\">Lon</th>\n              <th scope=\"col\">Endpoint</th>\n              <th scope=\"col\">Owner</th>\n            </tr>\n          </thead>\n          <tbody id=\"sensorList\">\n            {this.props.sensors.map((sensor, key) => {\n              return (\n                <tr key={key}>\n                  <th scope=\"row\">{sensor.id.toString()}</th>\n                  <td>{sensor.name}</td>\n                  <td>{sensor.lat}</td>\n                  <td>{sensor.lon}</td>\n                  <td>{sensor.endpoint}</td>\n                  <td>{sensor.owner}</td>\n                </tr>\n              );\n            })}\n          </tbody>\n        </table>\n      </div>\n    );\n  }\n}\n\nexport default Main;\n","import React, { Component } from \"react\";\nimport Web3 from \"web3\";\n// import logo from \"../logo.png\";\nimport \"./App.css\";\nimport Lassie from \"../abis/Lassie.json\";\nimport Navbar from \"./Navbar\";\nimport About from \"./About\";\nimport Main from \"./Main\";\n// import Trends from \"./Trends\";\n\nclass App extends Component {\n  async componentWillMount() {\n    await this.loadWeb3();\n    await this.loadBlockchainData();\n  }\n\n  async loadWeb3() {\n    // window.alert('loadWeb3')\n    if (window.ethereum) {\n      window.web3 = new Web3(window.ethereum);\n      await window.ethereum.enable();\n    } else if (window.web3) {\n      window.web3 = new Web3(window.web3.currentProvider);\n    } else {\n      window.alert(\n        \"Non-Ethereum browser detected. You should consider trying MetaMask!\"\n      );\n    }\n  }\n\n  async loadBlockchainData() {\n    const web3 = window.web3;\n    // Load account\n    const accounts = await web3.eth.getAccounts();\n    this.setState({ account: accounts[0] });\n    const networkId = await web3.eth.net.getId();\n    const networkData = Lassie.networks[networkId];\n    if (networkData) {\n      // window.alert('loadBlockChainData ... networkData is truthy...')\n      const lassie = web3.eth.Contract(Lassie.abi, networkData.address);\n      this.setState({ lassie });\n      const sensorCount = await lassie.methods.sensorCount().call();\n      console.log(sensorCount.toString());\n      this.setState({ sensorCount });\n      for (var i = 1; i <= sensorCount; i++) {\n        const sensor = await lassie.methods.sensors(i).call();\n        this.setState({\n          sensors: [...this.state.sensors, sensor]\n        });\n      }\n      const contractState = await lassie.methods.contractState().call();\n      this.setState({ contractState });\n\n      const responderState = await lassie.methods.responderState().call();\n      this.setState({ responderState });\n\n      const smokeThresholdBreached = await lassie.methods\n        .smokeThresholdBreached()\n        .call();\n      this.setState({ smokeThresholdBreached });\n\n      const temperatureThresholdBreached = await lassie.methods\n        .temperatureThresholdBreached()\n        .call();\n      this.setState({ temperatureThresholdBreached });\n\n      const name = await lassie.methods.name().call();\n      this.setState({ name });\n\n      console.log(\"Sensors\");\n      console.log(this.state.sensors);\n      console.log(\"contractState\" + this.state.contractState);\n      this.setState({ loading: false });\n    } else {\n      window.alert(\"Lassie contract not deployed to detected network.\");\n    }\n  }\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      account: \"\",\n      sensorCount: 0,\n      sensors: [],\n      loading: true,\n      blockNumber: \"\",\n      contractState: \"\",\n      responderState: \"\",\n      smokeThreshold: 1,\n      tempThreshold: 150,\n      smokeThresholdBreached: \"\",\n      temperatureThresholdBreached: \"\",\n      name: \"\"\n    };\n\n    this.createSensor = this.createSensor.bind(this);\n    //this.purchaseSensor = this.purchaseSensor.bind(this);\n  }\n\n  createSensor(name, lat, lon, endpoint) {\n    this.setState({ loading: true });\n    this.state.lassie.methods\n      .createSensor(name, lat, lon, endpoint)\n      .send({ from: this.state.account })\n      .once(\"receipt\", receipt => {\n        this.setState({ loading: false });\n      });\n  }\n\n  render() {\n    return (\n      <div>\n        <Navbar account={this.state.account} />\n        <About />\n        <div className=\"container-fluid mt-0\">\n          <div className=\"row\">\n            <main role=\"main\" className=\"col-lg-12 d-flex\">\n              {this.state.loading ? (\n                <div id=\"loader\" className=\"text-center\">\n                  <p className=\"text-center\">Loading...</p>\n                </div>\n              ) : (\n                <Main\n                  sensors={this.state.sensors}\n                  createSensor={this.createSensor}\n                  contractState={this.state.contractState}\n                  responderState={this.state.responderState}\n                  smokeThresholdBreached={this.state.smokeThresholdBreached}\n                  temperatureThresholdBreached={\n                    this.state.temperatureThresholdBreached\n                  }\n                />\n              )}\n            </main>\n            {/* <Trends /> */}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.css'\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}