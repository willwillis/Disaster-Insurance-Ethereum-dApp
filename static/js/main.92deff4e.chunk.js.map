{"version":3,"sources":["components/Example.js","components/Navbar.js","components/About.js","components/Utils.js","components/Guage.js","components/ListSensorsNarrow.js","components/Trends.js","components/AddSensor.js","components/GMap.js","components/App.js","serviceWorker.js","index.js"],"names":["ModalComponent","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","modal","toggle","bind","assertThisInitialized","setState","react_default","a","createElement","Fragment","Button","className","onClick","Modal","isOpen","ModalHeader","ModalBody","networkDataAddress","contractName","yourAccount","networkID","blockNumber","ModalFooter","color","React","Component","Navbar","console","log","href","target","rel","id","account","Example_ModalComponent","About","class","contractStateMap","0","1","2","3","responderStateMap","4","Guage","Alert","variant","Container","fluid","Row","Col","lg","xs","dist_default","nrOfLevels","percent","needleColor","textColor","formatTextValue","value","theInput","contractState","responderState","animDelay","colors","ListSensorsNarrow","scope","sensors","map","sensor","key","toString","name","Trends","AnyReactComponent","_ref","text","SimpleMap","process","GOOGLE_MAP_API_KEY","style","height","width","google_map_react_lib_default","bootstrapURLKeys","defaultCenter","center","defaultZoom","zoom","mapTypeId","options","getMapOptions","GMap_AnyReactComponent","lat","lng","lon","defaultProps","App","sensorCount","loading","smokeThreshold","tempThreshold","smokeThresholdBreached","temperatureThresholdBreached","networkId","mapCenter","createSensor","loadWeb3","loadBlockchainData","window","ethereum","web3","Web3","enable","currentProvider","alert","eth","getAccounts","accounts","net","getId","networkData","Lassie","networks","getBlockNumber","lassie","Contract","abi","address","methods","i","concat","toConsumableArray","endpoint","_this2","send","from","once","receipt","_this3","components_Navbar","components_About","components_Guage","GMap","components_Trends","components_ListSensorsNarrow","onSubmit","event","preventDefault","sensorName","sensorLat","sensorLon","sensorEndpoint","type","ref","input","placeholder","required","Boolean","location","hostname","match","ReactDOM","render","src_components_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.92deff4e.chunk.js","sourcesContent":["import React from \"react\";\nimport { Button, Modal, ModalHeader, ModalBody, ModalFooter } from \"reactstrap\";\n\nexport default class ModalComponent extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { modal: false };\n\n    this.toggle = this.toggle.bind(this);\n  }\n\n  toggle() {\n    this.setState({\n      modal: !this.state.modal\n    });\n  }\n\n  render() {\n    return (\n      <>\n        <Button className=\"btn-sm btn-secondary\" onClick={this.toggle}>\n          Network Details\n        </Button>\n\n        <Modal isOpen={this.state.modal}>\n          <ModalHeader>Ethereum Network Details</ModalHeader>\n          <ModalBody>\n            <b>Contract Address:</b>\n            <br />\n            {this.props.networkDataAddress}\n            <br />\n            <br />\n\n            <b>Contract Name:</b>\n            <br />\n            {this.props.contractName}\n            <br />\n            <br />\n\n            <b> Your Active Address:</b>\n            <br />\n            {this.props.yourAccount}\n            <br />\n            <br />\n            <b> Netwrok ID:</b>\n            <br />\n            {this.props.networkID}\n            <br />\n            <br />\n            <b> Current Block Number:</b>\n            <br />\n            {this.props.blockNumber}\n            <br />\n            <br />\n          </ModalBody>\n          <ModalFooter>\n            <Button color=\"danger\" onClick={this.toggle}>\n              Cancel\n            </Button>\n          </ModalFooter>\n        </Modal>\n      </>\n    );\n  }\n}\n\n// <div>\n// <h1>React Bootstrap Modal Example</h1>\n// <Button color=\"success\" onClick={this.toggle}>React Modal</Button>\n// <Modal isOpen={this.state.modal}>\n// <form onSubmit={this.handleSubmit}>\n// <ModalHeader>IPL 2018</ModalHeader>\n// <ModalBody>\n// <div className=\"row\">\n//   <div className=\"form-group col-md-4\">\n//   <label>Name:</label>\n//   <input type=\"text\" value={this.state.name} onChange={this.handleChangeName} className=\"form-control\" />\n//     </div>\n//     </div>\n//   <div className=\"row\">\n//    <div className=\"form-group col-md-4\">\n//   <label>Team:</label>\n//       <input type=\"text\" value={this.state.team} onChange={this.handleChangeTeam} className=\"form-control\" />\n//      </div>\n//     </div>\n//   <div className=\"row\">\n//    <div className=\"form-group col-md-4\">\n//     <label>Country:</label>\n//       <input type=\"text\" value={this.country} onChange={this.handleChangeCountry} className=\"form-control\" />\n//      </div>\n//     </div>\n// </ModalBody>\n// <ModalFooter>\n//   <input type=\"submit\" value=\"Submit\" color=\"primary\" className=\"btn btn-primary\" />\n//   <Button color=\"danger\" onClick={this.toggle}>Cancel</Button>\n// </ModalFooter>\n// </form>\n// </Modal>\n// </div>\n\n{\n  /* <Button color=\"success\" onClick={this.toggle}>\n          React Modal\n        </Button>\n\n        <Modal isOpen={this.state.modal}>\n          <Modal.Header closeButton>\n            <Modal.Title>Modal heading</Modal.Title>\n          </Modal.Header>\n          <Modal.Body>Woohoo, you're reading this text in a modal!</Modal.Body>\n          <Modal.Footer>\n            <Button color=\"danger\" onClick={this.toggle}>\n              Cancel\n            </Button>\n          </Modal.Footer>\n        </Modal> */\n}\n","import React, { Component } from \"react\";\nimport Example from \"./Example\";\n// Thank you https://appdividend.com/2018/03/30/react-bootstrap-modal-example-tutorial/\nclass Navbar extends Component {\n  render() {\n    console.log(this.props);\n    const networkDataAddress = this.props.networkDataAddress;\n\n    return (\n      <nav className=\"navbar navbar-dark fixed-top bg-dark flex-md-nowrap p-0 shadow\">\n        <a\n          className=\"navbar-brand col-sm-3 col-md-2 mr-0\"\n          href=\"\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          🔥 Lassie Disaster Response\n        </a>\n        <ul className=\"navbar-nav px-3\">\n          <li className=\"nav-item text-nowrap d-none d-sm-none d-sm-block\">\n            <small className=\"text-white\">\n              <span id=\"account\">Your Account: {this.props.account}</span>\n            </small>\n            &nbsp;{\" \"}\n            <Example\n              networkDataAddress={networkDataAddress}\n              yourAccount={this.props.account}\n              contractName={this.props.contractName}\n              networkID={this.props.networkID}\n              blockNumber={this.props.blockNumber}\n            />\n          </li>\n        </ul>\n      </nav>\n    );\n  }\n}\n\nexport default Navbar;\n","import React, { Component } from \"react\";\n\nclass About extends Component {\n  render() {\n    return (\n      <div class=\"px-3 py-3 pt-md-5 pb-md-4 mx-auto \">\n        <h1>Wild Fire Smart Contract Response</h1>\n      </div>\n    );\n  }\n}\n\nexport default About;\n","// uint8 public contractState;  // 1 = OK    2 = WARNING   3 = CRITICAL\n// uint8 public responderState; // 1 = OK    2 = PREPPED    3 = RESPOND\n\nconst contractStateMap = {\n  0: \"Retainer Funded\",\n  1: \"Retainer Funded\",\n  2: \"Escrow Funded\",\n  3: \"CRITICAL, DEPLOY!\"\n};\n\nconst responderStateMap = {\n  0: \"On Retainer\",\n  1: \"On Retainer\",\n  2: \"Preparing to Respond\",\n  3: \"RESPONDING\",\n  4: \"COMPLETE\"\n};\n\nconst thresholdMap = {\n  0: \"Below Threshold\",\n  1: \"Above Threshold\"\n};\n\nexport const contractStateToString = theInput => {\n  return contractStateMap[theInput];\n};\n\nexport const responderStateToString = theInput => {\n  return responderStateMap[theInput];\n};\n\nexport const thresholdToString = theInput => {\n  return thresholdMap[theInput];\n};\n","import React, { Component, useEffect, useState } from \"react\";\nimport { Container, Row, Col, Alert, Image } from \"react-bootstrap\";\nimport {\n  contractStateToString,\n  responderStateToString,\n  thresholdToString\n} from \"./Utils\";\nimport GaugeChart from \"react-gauge-chart\";\n\nconst chartStyle = {\n  class: \"text-center\"\n};\n\nclass Guage extends Component {\n  render() {\n    return (\n      <>\n        <h2>Smart Contract Overview</h2>\n        <Alert variant={\"secondary\"}>\n          <Container fluid>\n            <Row>\n              <Col lg={6}>\n                <h3 class=\"text-center\">Contract Parties</h3>\n              </Col>\n              <Col lg={6} class=\"text-center\">\n                <h3 class=\"text-center\">Contract Variables</h3>\n              </Col>\n            </Row>\n            <Row>\n              <Col xs={12} lg={3}>\n                <h5 class=\"text-center\">Manager State</h5>\n                <GaugeChart\n                  id=\"gauge-chart1\"\n                  nrOfLevels={3}\n                  percent={0.15}\n                  needleColor=\"#345243\"\n                  textColor=\"black\"\n                  formatTextValue={value =>\n                    contractStateToString(this.props.contractState)\n                  }\n                />\n              </Col>\n              <Col xs={12} lg={3}>\n                <h5 class=\"text-center\">Response Team</h5>\n                <GaugeChart\n                  id=\"gauge-chart2\"\n                  nrOfLevels={3}\n                  percent={0.15}\n                  needleColor=\"#345243\"\n                  textColor=\"black\"\n                  formatTextValue={value =>\n                    responderStateToString(this.props.responderState)\n                  }\n                  animDelay={1000}\n                />\n              </Col>\n\n              <Col xs={12} lg={3}>\n                <h5 class=\"text-center\">Smoke Threshold</h5>\n                <GaugeChart\n                  id=\"gauge-chart3\"\n                  percent={0.1}\n                  colors={[\"#5BE12C\", \"#F5CD19\", \"#EA4228\"]}\n                  nrOfLevels={2}\n                  textColor=\"black\"\n                  formatTextValue={value => \"Below Threshold\"}\n                  animDelay={500}\n                />\n              </Col>\n\n              <Col xs={12} lg={3}>\n                <h5 class=\"text-center\">Temperature Threshold</h5>\n                <GaugeChart\n                  id=\"gauge-chart4\"\n                  nrOfLevels={2}\n                  percent={0.15}\n                  needleColor=\"#345243\"\n                  colors={[\"#5BE12C\", \"#F5CD19\", \"#EA4228\"]}\n                  textColor=\"black\"\n                  formatTextValue={value => \"Below Threshold\"}\n                  animDelay={3000}\n                />\n              </Col>\n            </Row>\n          </Container>\n        </Alert>\n      </>\n    );\n  }\n}\n\nexport default Guage;\n","import React, { Component } from \"react\";\n\nclass ListSensorsNarrow extends Component {\n  render() {\n    return (\n      <>\n        <h2>Sensor List</h2>\n        <table className=\"table\">\n          <thead>\n            <tr>\n              <th scope=\"col\">#</th>\n              <th scope=\"col\">Name</th>\n            </tr>\n          </thead>\n          <tbody id=\"sensorList\">\n            {this.props.sensors.map((sensor, key) => {\n              return (\n                <tr key={key}>\n                  <th scope=\"row\">{sensor.id.toString()}</th>\n                  <td>{sensor.name}</td>\n                </tr>\n              );\n            })}\n          </tbody>\n        </table>\n      </>\n    );\n  }\n}\n\nexport default ListSensorsNarrow;\n","import React, { Component } from \"react\";\nimport ScriptTag from \"react-script-tag\";\n\nclass Trends extends Component {\n  render() {\n    console.log(this.props);\n    return (\n      <div>\n        {/* <ScriptTag type=\"text/javascript\">\n          {trends.embed.renderExploreWidget(\n            \"TIMESERIES\",\n            {\n              comparisonItem: [\n                { keyword: \"forest fire\", geo: \"US\", time: \"today 12-m\" }\n              ],\n              category: 0,\n              property: \"\"\n            },\n            {\n              exploreQuery: \"geo=US&q=forest%20fire&date=today 12-m\",\n              guestPath: \"https://trends.google.com:443/trends/embed/\"\n            }\n          )}\n        </ScriptTag> */}\n        <div id=\"TIMESERIES\"></div>\n      </div>\n    );\n  }\n}\n\nexport default Trends;\n","import React, { Component } from \"react\";\n\nclass AddSensor extends Component {\n  //   createSensor(name, lat, lon, endpoint) {\n  //     this.setState({ loading: true });\n  //     this.state.lassie.methods\n  //       .createSensor(name, lat, lon, endpoint)\n  //       .send({ from: this.state.account })\n  //       .once(\"receipt\", receipt => {\n  //         this.setState({ loading: false });\n  //       });\n  //   }\n\n  render() {\n    return (\n      <>\n        <h2>Add a Sensor</h2>\n        <form\n          onSubmit={event => {\n            event.preventDefault();\n            const name = this.sensorName.value;\n            // const price = window.web3.utils.toWei(\n            //   this.sensorPrice.value.toString(),\n            //   \"Ether\"\n            // );\n            const lat = this.sensorLat.value;\n            const lon = this.sensorLon.value;\n            const endpoint = this.sensorEndpoint.value;\n            this.props.createSensor(name, lat, lon, endpoint);\n          }}\n        >\n          <div className=\"form-group mr-sm-2\">\n            <input\n              id=\"sensorName\"\n              type=\"text\"\n              ref={input => {\n                this.sensorName = input;\n              }}\n              className=\"form-control\"\n              placeholder=\"Sensor Name\"\n              required\n            />\n          </div>\n          <div className=\"form-group mr-sm-2\">\n            <input\n              id=\"sensorLat\"\n              type=\"text\"\n              ref={input => {\n                this.sensorLat = input;\n              }}\n              className=\"form-control\"\n              placeholder=\"Sensor Latitude\"\n              required\n            />\n          </div>\n          <div className=\"form-group mr-sm-2\">\n            <input\n              id=\"sensorLon\"\n              type=\"text\"\n              ref={input => {\n                this.sensorLon = input;\n              }}\n              className=\"form-control\"\n              placeholder=\"Sensor Longitude\"\n              required\n            />\n          </div>\n          <div className=\"form-group mr-sm-2\">\n            <input\n              id=\"sensorEndpoint\"\n              type=\"text\"\n              ref={input => {\n                this.sensorEndpoint = input;\n              }}\n              className=\"form-control\"\n              placeholder=\"AWS Endpoint\"\n              required\n            />\n          </div>\n          <button type=\"submit\" className=\"btn btn-primary\">\n            Add Sensor\n          </button>\n        </form>\n      </>\n    );\n  }\n}\n\nexport default AddSensor;\n","import React, { Component } from \"react\";\nimport GoogleMapReact from \"google-map-react\";\n\nconst AnyReactComponent = ({ text }) => <div>{text}</div>;\nconst API_KEY = process.env.GOOGLE_MAP_API_KEY;\n\nclass SimpleMap extends Component {\n  static defaultProps = {\n    center: {\n      lat: 37.85,\n      lng: -120.083333\n    },\n    zoom: 11\n  };\n\n  //   static getMapOptions = (maps: Maps) => {\n  //     return {\n  //       streetViewControl: false,\n  //       scaleControl: true,\n  //       fullscreenControl: false,\n  //       styles: [\n  //         {\n  //           featureType: \"poi.business\",\n  //           elementType: \"labels\",\n  //           stylers: [\n  //             {\n  //               visibility: \"off\"\n  //             }\n  //           ]\n  //         }\n  //       ],\n  //       gestureHandling: \"greedy\",\n  //       disableDoubleClickZoom: true,\n  //       minZoom: 11,\n  //       maxZoom: 18,\n\n  //       mapTypeControl: true,\n  //       mapTypeId: maps.MapTypeId.SATELLITE,\n  //       mapTypeControlOptions: {\n  //         style: maps.MapTypeControlStyle.HORIZONTAL_BAR,\n  //         position: maps.ControlPosition.BOTTOM_CENTER,\n  //         mapTypeIds: [\n  //           maps.MapTypeId.ROADMAP,\n  //           maps.MapTypeId.SATELLITE,\n  //           maps.MapTypeId.HYBRID\n  //         ]\n  //       },\n\n  //       zoomControl: true,\n  //       clickableIcons: false\n  //     };\n  //   };\n\n  render() {\n    return (\n      // Important! Always set the container height explicitly\n      <div style={{ height: \"450px\", width: \"100%\" }}>\n        <GoogleMapReact\n          bootstrapURLKeys={{ key: \"AIzaSyDVu7n8GFMljA8sDPmEC24k-0RIjXFVaVo\" }}\n          defaultCenter={this.props.center}\n          defaultZoom={this.props.zoom}\n          mapTypeId={\"satellite\"}\n          options={this.getMapOptions}\n        >\n          {this.props.sensors.map((sensor, key) => {\n            return (\n              //   <tr key={key}>\n              //     <th scope=\"row\">{sensor.id.toString()}</th>\n              //     <td>{sensor.name}</td>\n              //     <td>{sensor.lat}</td>\n              //     <td>{sensor.lon}</td>\n              //     <td>{sensor.endpoint}</td>\n              //     <td>{sensor.owner}</td>\n              //   </tr>\n              <AnyReactComponent\n                lat={sensor.lat}\n                lng={sensor.lon}\n                text={sensor.name}\n              />\n            );\n          })}\n        </GoogleMapReact>\n      </div>\n    );\n  }\n}\n\nexport default SimpleMap;\n","import React, { Component } from \"react\";\nimport Web3 from \"web3\";\n// import logo from \"../logo.png\";\nimport \"./App.css\";\nimport Lassie from \"../abis/Lassie.json\";\nimport Navbar from \"./Navbar\";\nimport About from \"./About\";\nimport Guage from \"./Guage\";\n// import ListSensors from \"./ListSensors\";\nimport ListSensorsNarrow from \"./ListSensorsNarrow\";\nimport { Container, Row, Col, Alert, Image } from \"react-bootstrap\";\nimport AddSensor from \"./AddSensor\";\nimport Trends from \"./Trends\";\nimport GMap from \"./GMap\";\n\nclass App extends Component {\n  async componentWillMount() {\n    await this.loadWeb3();\n    await this.loadBlockchainData();\n  }\n\n  async loadWeb3() {\n    // window.alert('loadWeb3')\n    if (window.ethereum) {\n      window.web3 = new Web3(window.ethereum);\n      await window.ethereum.enable();\n    } else if (window.web3) {\n      window.web3 = new Web3(window.web3.currentProvider);\n    } else {\n      window.alert(\n        \"Non-Ethereum browser detected. You should consider trying MetaMask!\"\n      );\n    }\n  }\n\n  async loadBlockchainData() {\n    const web3 = window.web3;\n    // Load account\n    const accounts = await web3.eth.getAccounts();\n    this.setState({ account: accounts[0] });\n    const networkId = await web3.eth.net.getId();\n    const networkData = Lassie.networks[networkId];\n    this.setState({ networkID: networkId });\n    const blockNumber = await web3.eth.getBlockNumber();\n    console.log(\"blockNumber: \" + blockNumber);\n    this.setState({ blockNumber });\n    if (networkData) {\n      // window.alert('loadBlockChainData ... networkData is truthy...')\n      const lassie = web3.eth.Contract(Lassie.abi, networkData.address);\n      this.setState({ lassie });\n      const sensorCount = await lassie.methods.sensorCount().call();\n      console.log(sensorCount.toString());\n      this.setState({ sensorCount });\n      for (var i = 1; i <= sensorCount; i++) {\n        const sensor = await lassie.methods.sensors(i).call();\n        this.setState({\n          sensors: [...this.state.sensors, sensor]\n        });\n      }\n      const networkDataAddress = networkData.address;\n      this.setState({ networkDataAddress });\n\n      const contractState = await lassie.methods.contractState().call();\n      this.setState({ contractState });\n\n      const responderState = await lassie.methods.responderState().call();\n      this.setState({ responderState });\n\n      const smokeThresholdBreached = await lassie.methods\n        .smokeThresholdBreached()\n        .call();\n      this.setState({ smokeThresholdBreached });\n\n      const temperatureThresholdBreached = await lassie.methods\n        .temperatureThresholdBreached()\n        .call();\n      this.setState({ temperatureThresholdBreached });\n\n      const name = await lassie.methods.name().call();\n      this.setState({ name });\n\n      console.log(\"Sensors\");\n      console.log(this.state.sensors);\n      console.log(\"contractState\" + this.state.contractState);\n      this.setState({ loading: false });\n    } else {\n      window.alert(\"Lassie contract not deployed to detected network.\");\n    }\n  }\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      account: \"\",\n      sensorCount: 0,\n      sensors: [],\n      loading: true,\n      blockNumber: \"\",\n      contractState: \"\",\n      responderState: \"\",\n      smokeThreshold: 1,\n      tempThreshold: 150,\n      smokeThresholdBreached: \"\",\n      temperatureThresholdBreached: \"\",\n      name: \"\",\n      networkDataAddress: \"\",\n      networkId: \"\",\n      mapCenter: {\n        lat: 37.85,\n        lng: -120.083333\n      }\n    };\n\n    this.createSensor = this.createSensor.bind(this);\n  }\n\n  // moved this logic to AddSensor.js COmponent.\n  createSensor(name, lat, lon, endpoint) {\n    this.setState({ loading: true });\n    this.state.lassie.methods\n      .createSensor(name, lat, lon, endpoint)\n      .send({ from: this.state.account })\n      .once(\"receipt\", receipt => {\n        this.setState({ loading: false });\n      });\n  }\n\n  render() {\n    return (\n      <div>\n        <Navbar\n          account={this.state.account}\n          networkDataAddress={this.state.networkDataAddress}\n          contractName={this.state.name}\n          networkID={this.state.networkID}\n          blockNumber={this.state.blockNumber}\n        />\n        <About />\n        {this.state.loading ? (\n          <div id=\"loader\" className=\"text-center\">\n            <p className=\"text-center\">Loading...</p>\n          </div>\n        ) : (\n          <>\n            <Row>\n              <Col xs={12} lg={9}>\n                <Guage\n                  createSensor={this.createSensor}\n                  contractState={this.state.contractState}\n                  responderState={this.state.responderState}\n                  smokeThresholdBreached={this.state.smokeThresholdBreached}\n                  temperatureThresholdBreached={\n                    this.state.temperatureThresholdBreached\n                  }\n                />\n                <GMap\n                  sensors={this.state.sensors}\n                  center={this.state.mapCenter}\n                  zoom={7}\n                />\n                <Trends />\n              </Col>\n              <Col xs={12} lg={3}>\n                <ListSensorsNarrow sensors={this.state.sensors} />\n                {/* <AddSensor /> */}\n                <h2>Add a Sensor</h2>\n                <form\n                  onSubmit={event => {\n                    event.preventDefault();\n                    const name = this.sensorName.value;\n                    // const price = window.web3.utils.toWei(\n                    //   this.sensorPrice.value.toString(),\n                    //   \"Ether\"\n                    // );\n                    const lat = this.sensorLat.value;\n                    const lon = this.sensorLon.value;\n                    const endpoint = this.sensorEndpoint.value;\n                    this.createSensor(name, lat, lon, endpoint);\n                  }}\n                >\n                  <div className=\"form-group mr-sm-2\">\n                    <input\n                      id=\"sensorName\"\n                      type=\"text\"\n                      ref={input => {\n                        this.sensorName = input;\n                      }}\n                      className=\"form-control\"\n                      placeholder=\"Sensor Name\"\n                      required\n                    />\n                  </div>\n                  <div className=\"form-group mr-sm-2\">\n                    <input\n                      id=\"sensorLat\"\n                      type=\"text\"\n                      ref={input => {\n                        this.sensorLat = input;\n                      }}\n                      className=\"form-control\"\n                      placeholder=\"Sensor Latitude\"\n                      required\n                    />\n                  </div>\n                  <div className=\"form-group mr-sm-2\">\n                    <input\n                      id=\"sensorLon\"\n                      type=\"text\"\n                      ref={input => {\n                        this.sensorLon = input;\n                      }}\n                      className=\"form-control\"\n                      placeholder=\"Sensor Longitude\"\n                      required\n                    />\n                  </div>\n                  <div className=\"form-group mr-sm-2\">\n                    <input\n                      id=\"sensorEndpoint\"\n                      type=\"text\"\n                      ref={input => {\n                        this.sensorEndpoint = input;\n                      }}\n                      className=\"form-control\"\n                      placeholder=\"AWS Endpoint\"\n                      required\n                    />\n                  </div>\n                  <button type=\"submit\" className=\"btn btn-primary\">\n                    Add Sensor\n                  </button>\n                </form>\n              </Col>\n            </Row>\n          </>\n        )}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.css'\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}